/**
 * Render pass implementation of a common camera frame rendering with integrated  post-processing
 * effects.
 *
 * @category Graphics
 * @ignore
 */
export class RenderPassCameraFrame extends RenderPass {
    constructor(app: any, options?: {});
    app: any;
    prePass: any;
    scenePass: any;
    composePass: any;
    bloomPass: any;
    ssaoPass: any;
    taaPass: any;
    _bloomEnabled: boolean;
    _ssaoEnabled: boolean;
    _renderTargetScale: number;
    /**
     * @type {RenderTarget}
     * @private
     */
    private rt;
    sceneTexture: Texture;
    sceneDepth: Texture;
    sanitizeOptions(options: any): any;
    set renderTargetScale(value: number);
    get renderTargetScale(): number;
    get bloomEnabled(): boolean;
    set ssaoEnabled(value: boolean);
    get ssaoEnabled(): boolean;
    set lastMipLevel(value: any);
    get lastMipLevel(): any;
    setupRenderPasses(options: any): void;
    hdrFormat: number;
    sceneOptions: {
        resizeSource: any;
        scaleX: number;
        scaleY: number;
    };
    collectPasses(): any[];
    createPasses(options: any): void;
    setupScenePrepass(options: any): void;
    setupScenePass(options: any): {
        lastAddedIndex: number;
        clearRenderTarget: boolean;
    };
    colorGrabPass: RenderPassColorGrab;
    scenePassTransparent: RenderPassForward;
    setupSsaoPass(options: any): void;
    setupBloomPass(options: any, inputTexture: any): void;
    setupTaaPass(options: any): Texture;
    setupComposePass(options: any): void;
    setupAfterPass(options: any, scenePassesInfo: any): void;
    afterPass: RenderPassForward;
}
import { RenderPass } from '../../platform/graphics/render-pass.js';
import { Texture } from '../../platform/graphics/texture.js';
import { RenderPassColorGrab } from '../../scene/graphics/render-pass-color-grab.js';
import { RenderPassForward } from '../../scene/renderer/render-pass-forward.js';
